using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data;

namespace new_anom
{
    public static class SystemEvent
    {
        public static DataTable all_events(string dt_flow_path, string[] dt_pressure_path, 
                                      bool flow_high,
                                      bool flow_low,
                                      bool pressure_high,
                                      bool pressure_low,
                                      bool correlarion)
        {
            DataTable csvData = new DataTable();
            csvData = BasicFunction.read_csvfile(csvData, dt_flow_path);
            string flow_sensor_name = "Original name is flow";
            int first_event_row;
            for(first_event_row = 0; first_event_row < csvData.Rows.Count; first_event_row++)
            {
                if(csvData.Rows[first_event_row]["Name"].ToString() != "")
                {
                    break;
                }
            }
            if(csvData.Rows[first_event_row]["Name"].ToString() != "flow")
            {
                flow_sensor_name = csvData.Rows[first_event_row]["Name"].ToString();
                WaterEventDetector.flow_sensor_name = flow_sensor_name;
                for (int i = 0; i < csvData.Rows.Count; i++)
                {
                    csvData.Rows[i]["Name"] = "flow";
                }
            }
            DataView dv_flow = new DataView(csvData);
            string dv_flow_filter = "duration <> ''";

            if (flow_high == false)
            {
                dv_flow_filter = dv_flow_filter + "AND Warning <> 'High'";
            }
            if (flow_low == false)
            {
                dv_flow_filter = dv_flow_filter + "AND Warning <> 'Low'";
            }
            dv_flow.RowFilter = dv_flow_filter;

            if (csvData.Columns.Contains("out difference"))
            {
                csvData = dv_flow.ToTable("Selected", false, "Timestamp", "Name", "Value", "Warning", "duration", "out difference");
            }
            else
            {
                csvData = dv_flow.ToTable("Selected", false, "Timestamp", "Name", "Value", "Warning", "duration");
            }

            foreach (string path in dt_pressure_path)
            {
                DataTable temp = new DataTable();
                temp = BasicFunction.read_csvfile(temp, path);
                DataView dv_pressure = new DataView(temp);
                string dv_pressure_filter = "duration <> '' AND Name <> ''";
                //dv_pressure.RowFilter = "Name <> ''";
                if (pressure_high == false)
                {
                    dv_pressure_filter = dv_pressure_filter + "AND Warning <> 'High'";
                }
                if(pressure_low == false)
                {
                    dv_pressure_filter = dv_pressure_filter + "AND Warning <> 'Low'";
                }
                dv_pressure.RowFilter = dv_pressure_filter;

                if (temp.Columns.Contains("out difference"))
                {
                    temp = dv_pressure.ToTable("Selected", false, "Timestamp", "Name", "Value", "Warning", "duration", "out difference");
                }
                else
                {
                    temp = dv_pressure.ToTable("Selected", false, "Timestamp", "Name", "Value", "Warning", "duration");
                }
                csvData.Merge(temp);
            }
            DataView dv_sort = new DataView(csvData);
            dv_sort.Sort = "Timestamp";
            DataTable copy_data = csvData.Copy(); ;
            DataView dv_delete = new DataView(copy_data);
            dv_delete.Sort = "Timestamp";
            //csvData = dv_delete.ToTable();
            //Xbar_class.WriteToCsvFile(csvData, "D:\\Work\\NYSR data\\Xbar\\report\\before.csv");
            if (correlarion != true)
            {
                csvData = dv_delete.ToTable();
                if (flow_sensor_name != "Original name is flow")
                {
                    for (int i = 0; i < csvData.Rows.Count; i++)
                    {
                        if (csvData.Rows[i]["Name"].ToString() == "flow")
                        {
                            csvData.Rows[i]["Name"] = flow_sensor_name;
                        }
                    }
                }
                return csvData;
            }

            int first_event = 0;
            for (int i = 0; i < dv_sort.Count; i++)
            {
                if (dv_sort[i]["Name"].ToString() != "flow")
                {
                    string d_name = dv_sort[i]["Name"].ToString();
                    string d_time = dv_sort[i]["Timestamp"].ToString();
                    for (int j = 0; j < dv_delete.Count; j++)
                    {
                        if (dv_delete[j]["Timestamp"].ToString() == d_time && dv_delete[j]["Name"].ToString() == d_name)
                        {
                            dv_delete.Delete(j);
                            break;
                        }

                    }
                }
                else
                {
                    first_event = i;
                    Console.WriteLine("first event at line: {0}, {1}", first_event, dv_sort[i]["Name"].ToString());
                    break;
                }
            }
            
            DateTime event_start = Convert.ToDateTime(dv_sort[first_event]["Timestamp"].ToString()); ;
            DateTime event_end = event_start.AddMinutes(Convert.ToDouble(dv_sort[first_event]["duration"].ToString()));
            
            for (int i = first_event; i < dv_sort.Count; i++)
            {
                if (dv_sort[i]["Name"].ToString() == "flow")
                {
                    event_start = Convert.ToDateTime(dv_sort[i]["Timestamp"].ToString());
                    event_end = event_start.AddMinutes(Convert.ToDouble(dv_sort[i]["duration"].ToString()));
                }
                else
                {
                    DateTime this_start = Convert.ToDateTime(dv_sort[i]["Timestamp"].ToString());
                    if (this_start > event_end)
                    {
                        string d_name = dv_sort[i]["Name"].ToString();
                        string d_time = dv_sort[i]["Timestamp"].ToString();
                        for (int j = 0; j < dv_delete.Count; j++)
                        {
                            if (dv_delete[j]["Timestamp"].ToString() == d_time && dv_delete[j]["Name"].ToString() == d_name)
                            {
                                dv_delete.Delete(j);
                                break;
                            }
                        }
                    }
                }
            }
            if(correlarion == true)
            {
                for (int i = dv_delete.Count - 1; i >= 0; i--)
                {
                    if(dv_delete[i]["Name"].ToString() == "flow")
                    {
                        if(i == dv_delete.Count - 1 || dv_delete[i + 1]["Name"].ToString() == "flow")
                        {
                            dv_delete.Delete(i);
                        }
                    }
                }

            }
            csvData = dv_delete.ToTable();
            if (flow_sensor_name != "Original name is flow")
            {
                for (int i = 0; i < csvData.Rows.Count; i++)
                {
                    if(csvData.Rows[i]["Name"].ToString() == "flow")
                    {
                        csvData.Rows[i]["Name"] = flow_sensor_name;
                    }
                }
            }
            return csvData;
        }
    }
}
